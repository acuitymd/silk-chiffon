name: Rust Release Dev

on:
  workflow_dispatch:

env:
  DUCKDB_VERSION: 1.3.2

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate tag
        id: tag
        run: |
          echo "tag=dev-$(date -u +%Y%m%d%H%M%S)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Dev Build ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: true
          body: |
            Development build from commit ${{ github.sha }}
  build-and-upload:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: silk-chiffon-linux-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: silk-chiffon-macos-arm64
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup DuckDB (Ubuntu amd64 only)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip
          curl -L -O https://github.com/duckdb/duckdb/releases/download/v${DUCKDB_VERSION}/libduckdb-linux-amd64.zip
          unzip libduckdb-linux-amd64.zip -d libduckdb
          sudo mv libduckdb/duckdb.* /usr/local/include/
          sudo mv libduckdb/libduckdb.so /usr/local/lib/
          sudo ldconfig /usr/local/lib
          rm -rf libduckdb libduckdb-linux-amd64.zip
      - name: Setup DuckDB (Ubuntu arm64 only)
        if: ${{ matrix.os == 'ubuntu-24.04-arm' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip
          curl -L -O https://github.com/duckdb/duckdb/releases/download/v${DUCKDB_VERSION}/libduckdb-linux-arm64.zip
          unzip libduckdb-linux-arm64.zip -d libduckdb
          sudo mv libduckdb/duckdb.* /usr/local/include/
          sudo mv libduckdb/libduckdb.so /usr/local/lib/
          sudo ldconfig /usr/local/lib
          rm -rf libduckdb libduckdb-linux-arm64.zip
      - name: Setup DuckDB (macOS only)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install duckdb
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Modify the rust toolchain version
        run: rustup override set stable
      - name: Update rustup and rust
        run: rustup update
      - name: Output rust toolchain version
        run: rustup show
      - name: Output rust version for educational purposes
        run: rustup --version

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Package
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.artifact_name }}.tar.gz silk-chiffon
          echo "ASSET_PATH=${{ matrix.artifact_name }}.tar.gz" >> $GITHUB_ENV
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_PATH }}
          asset_content_type: application/octet-stream
