name: Release Dev

on:
  workflow_dispatch:

env:
  DUCKDB_VERSION: 1.3.2
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            zigbuild: true
            duckdb_target: linux-amd64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            zigbuild: true
            duckdb_target: linux-arm64
          - target: aarch64-apple-darwin
            os: macos-latest
            zigbuild: false
            duckdb_target: macos-arm64
    steps:
      - uses: actions/checkout@v4
      - name: Setup DuckDB (Linux only)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip
          curl -L -O https://github.com/duckdb/duckdb/releases/download/v${{env.DUCKDB_VERSION}}/libduckdb-${{ matrix.duckdb_target }}.zip && echo "Downloaded DuckDB" || echo "Failed to download DuckDB"
          unzip libduckdb-${{ matrix.duckdb_target }}.zip -d libduckdb
          sudo mv libduckdb/duckdb.* /usr/local/include/
          sudo mv libduckdb/libduckdb.so /usr/local/lib/
          sudo ldconfig /usr/local/lib
          rm -rf libduckdb libduckdb-${{ matrix.duckdb_target }}.zip
      - name: Setup DuckDB (macOS only)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install duckdb
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-
      - uses: taiki-e/install-action@v2
        if: ${{ matrix.zigbuild }}
        with:
          tool: cargo-zigbuild
      - uses: mlugg/setup-zig@v2
        if: ${{ matrix.zigbuild }}
      - name: Setup rust
        run: |
          rustup override set stable
          rustup target add ${{ matrix.target }}
          rustup show
          rustup --version
      - name: Build binary using zigbuild
        run: cargo zigbuild --release --target ${{ matrix.target }}
        if: ${{ matrix.zigbuild }}
      - name: Build binary using cargo
        run: cargo build --release --target ${{ matrix.target }}
        if: ${{ matrix.zigbuild == false }}
        shell: bash
      - name: Package binary
        run: |
          BINARY_NAME="$(cargo read-manifest | jq -r '.targets[] | select(.kind[] == "bin") | .name')"
          PACKAGED_BINARY_NAME="${BINARY_NAME}-${{ matrix.target }}"
          mkdir -p dist
          cp "target/${{ matrix.target }}/release/${BINARY_NAME}" "dist/${PACKAGED_BINARY_NAME}/"
          echo "ASSET_PATH=dist/${PACKAGED_BINARY_NAME}" >> $GITHUB_ENV
          echo "ASSET_NAME=${PACKAGED_BINARY_NAME}" >> $GITHUB_ENV
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          # Upload each artifact to the release
          for target_dir in artifacts/*/; do
            target_name=$(basename "$target_dir")
            for file in "$target_dir"*; do
              if [ -f "$file" ]; then
                echo "Uploading $file"
                gh release upload "${{ github.ref_name }}" "$file" --clobber
              fi
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
