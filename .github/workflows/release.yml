name: Release
on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: "true"
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  DUCKDB_VERSION: 1.3.2

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            os: linux
            duckdb_asset: linux-amd64
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-24.04-arm
            os: linux
            duckdb_asset: linux-arm64
          - target: aarch64-apple-darwin
            runner: macos-latest
            os: macos
            duckdb_asset: osx-universal

    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v4

      #   - uses: mozilla-actions/sccache-action@v0.0.9
      - uses: ./.github/workflows/actions/sccache-action

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install packages (Linux only)
        if: ${{ matrix.os == 'linux' }}
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y curl unzip lld
          curl -L -O https://github.com/duckdb/duckdb/releases/download/v${{env.DUCKDB_VERSION}}/libduckdb-${{ matrix.duckdb_asset }}.zip
          unzip libduckdb-${{ matrix.duckdb_asset }}.zip -d libduckdb
          sudo mv libduckdb/duckdb.* /usr/local/include/
          sudo mv libduckdb/libduckdb.so /usr/local/lib/
          sudo ldconfig /usr/local/lib
          rm -rf libduckdb libduckdb-${{ matrix.duckdb_asset }}.zip

      - name: Install packages
        if: ${{ matrix.os == 'macos' }}
        run: brew install duckdb lld

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-${{ matrix.runner }}"

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Generate version
        id: version
        run: |
          SHORT_SHA=$(git rev-parse --short=8 ${{ github.sha }})
          echo "version=$(date '+%Y%m%d')-${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Rename binary
        run: |
          cp \
            target/${{ matrix.target }}/release/silk-chiffon \
            target/${{ matrix.target }}/release/silk-chiffon-${{ matrix.target }}
          gzip -9 target/${{ matrix.target }}/release/silk-chiffon-${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: silk-chiffon-${{ matrix.target }}-${{ steps.version.outputs.version }}
          path: target/${{ matrix.target }}/release/silk-chiffon-${{ matrix.target }}.gz
          compression-level: 0

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./binaries

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # picking central time just because I can
          VERSION="v$(date -z 'America/Chicago' '+%Y-%m-%d_%H:%M:%S')_$(git rev-parse --short=8 ${{ github.sha }})"
          gh release create ${VERSION} \
            --title "üíù Release ${VERSION}" \
            --generate-notes \
            ./binaries/**/*
