name: Release Dev

on:
  workflow_dispatch:

env:
  DUCKDB_VERSION: 1.3.2
  RUST_BACKTRACE: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate tag and create release
        id: tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="dev-$(date -u +%Y%m%d%H%M%S)-$(git rev-parse --short HEAD)"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

          # Create the release
          gh release create "$TAG" \
            --title "Dev Build $TAG" \
            --notes "Development build from commit ${{ github.sha }}" \
            --prerelease
  build-and-upload:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: silk-chiffon-linux-amd64
            duckdb_target: linux-amd64
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            artifact_name: silk-chiffon-linux-arm64
            duckdb_target: linux-arm64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: silk-chiffon-macos-arm64
            duckdb_target: macos-arm64
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup DuckDB (Linux only)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip
          curl -L -O https://github.com/duckdb/duckdb/releases/download/v${{env.DUCKDB_VERSION}}/libduckdb-${{ matrix.duckdb_target }}.zip && echo "Downloaded DuckDB" || echo "Failed to download DuckDB"
          unzip libduckdb-${{ matrix.duckdb_target }}.zip -d libduckdb
          sudo mv libduckdb/duckdb.* /usr/local/include/
          sudo mv libduckdb/libduckdb.so /usr/local/lib/
          sudo ldconfig /usr/local/lib
          rm -rf libduckdb libduckdb-${{ matrix.duckdb_target }}.zip
      - name: Setup DuckDB (macOS only)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install duckdb
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: taiki-e/install-action@v2
        if: ${{ matrix.os != 'macos-latest' }}
        with:
          tool: cargo-zigbuild
      - name: Modify the rust toolchain version
        run: rustup override set stable
      - name: Update rustup and rust
        run: rustup update
      - name: Output rust toolchain version
        run: rustup show
      - name: Output rust version for educational purposes
        run: rustup --version
      - name: Install zig
        if: ${{ matrix.os != 'macos-latest' }}
        uses: mlugg/setup-zig@v2
      - name: Build
        if: ${{ matrix.os != 'macos-latest' }}
        run: cargo zigbuild --release --target ${{ matrix.target }}
      - name: Build (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: cargo build --release
      - name: Package
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.artifact_name }}.tar.gz silk-chiffon
          echo "ASSET_PATH=${{ matrix.artifact_name }}.tar.gz" >> $GITHUB_ENV
      - name: Upload to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ needs.create-release.outputs.tag }}" "${{ env.ASSET_PATH }}" --clobber
